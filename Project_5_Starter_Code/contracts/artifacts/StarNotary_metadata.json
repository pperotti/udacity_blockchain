{
	"compiler": {
		"version": "0.5.17+commit.d19bba13"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "buyStar",
				"outputs": [],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "createStar",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId2",
						"type": "uint256"
					}
				],
				"name": "exchangeStars",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getSender",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "lookUptokenIdToStarInfo",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "putStarUpForSale",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "starsForSale",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "tokenIdToStarInfo",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "_to1",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "transferStar",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"approve(address,uint256)": {
					"details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
					"params": {
						"to": "address to be approved for the given token ID",
						"tokenId": "uint256 ID of the token to be approved"
					}
				},
				"balanceOf(address)": {
					"details": "Gets the balance of the specified address",
					"params": {
						"owner": "address to query the balance of"
					},
					"return": "uint256 representing the amount owned by the passed address"
				},
				"getApproved(uint256)": {
					"details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
					"params": {
						"tokenId": "uint256 ID of the token to query the approval of"
					},
					"return": "address currently approved for the given token ID"
				},
				"isApprovedForAll(address,address)": {
					"details": "Tells whether an operator is approved by a given owner",
					"params": {
						"operator": "operator address which you want to query the approval of",
						"owner": "owner address which you want to query the approval of"
					},
					"return": "bool whether the given operator is approved by the given owner"
				},
				"ownerOf(uint256)": {
					"details": "Gets the owner of the specified token ID",
					"params": {
						"tokenId": "uint256 ID of the token to query the owner of"
					},
					"return": "owner address currently marked as the owner of the given token ID"
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"from": "current owner of the token",
						"to": "address to receive the ownership of the given token ID",
						"tokenId": "uint256 ID of the token to be transferred"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"_data": "bytes data to send along with a safe transfer check",
						"from": "current owner of the token",
						"to": "address to receive the ownership of the given token ID",
						"tokenId": "uint256 ID of the token to be transferred"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
					"params": {
						"approved": "representing the status of the approval to be set",
						"to": "operator address to set the approval"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "implement supportsInterface(bytes4) using a lookup table"
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"from": "current owner of the token",
						"to": "address to receive the ownership of the given token ID",
						"tokenId": "uint256 ID of the token to be transferred"
					}
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/contracts/StarNotary.sol": "StarNotary"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/contracts/StarNotary.sol": {
			"keccak256": "0x747fda1fb7d214de5652a4f39e4ed8f393e2c7711c5ae8669ab1b4d8e21a57e0",
			"urls": [
				"bzz-raw://c6658019226eae210a6990a4174482055c211181155f7323c05f624a91368379",
				"dweb:/ipfs/Qmbh4adirDi6SCbxPtXFj8HHfo9E5ykyT2EdJbiHNge9FC"
			]
		},
		"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol": {
			"keccak256": "0x9da23588f58d0fa67097984e151bdaa6aa69c5e192bae17b44a90b0cfc194736",
			"urls": [
				"bzz-raw://5e88c7dbb4d1e6d3f133112b9994491b8531f5d9103cf41becd1c267d2cd67af",
				"dweb:/ipfs/QmNuSmDBgv616hXRshbHx48ufdZoSrcFHpwqP4iPg2ac4X"
			]
		},
		"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol": {
			"keccak256": "0xbbb6159006ae3639daea09f7d63987816d6cf3a99f52af919363e025d3abf3b8",
			"urls": [
				"bzz-raw://35e7d742ee71461779df12a0ab1ad4701144d98eb6401182838c8daf40b008dd",
				"dweb:/ipfs/QmY4t7pxcX2cfk6VsGJWZLBgoKMpRctY8X1HPxykLjptSi"
			]
		},
		"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol": {
			"keccak256": "0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b",
			"urls": [
				"bzz-raw://1eb493553b27efd46c231a836a83ce50d215639feb97b4aac9f301d0fd034ff5",
				"dweb:/ipfs/QmbMdvSXcqGKxeeYvzF3VrWpoHQyVzMXBhzhAokF2Gdymv"
			]
		},
		"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x1ff0a01584bb3bd8e40396abca4a5a3148cdee6bb667f056a5932496d287fc68",
			"urls": [
				"bzz-raw://5baf70ab98c9bd6343caa349aa5214846b3f822384ec95404dfe853dcec67f03",
				"dweb:/ipfs/QmaEiLtF3zhYhTLewxirUhgoRZukE1zErEQHXoUWiMYrRH"
			]
		},
		"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x1f059ee943273719130df645fa38069b792988e8b732585528d5b1265f5aa046",
			"urls": [
				"bzz-raw://31e4d99091a83a42a6ea14d74ceae2ec3ffb2905c7ee07358875af72ea188333",
				"dweb:/ipfs/Qmf7nHc6BwhbyawapCVRZHzhBHNoA8ftpQWmGSyToVKVzN"
			]
		},
		"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x5e7281dbd14cf07af0974ce830c6242062cd430b70658878d49b5f5c1e2ec0aa",
			"urls": [
				"bzz-raw://3c9374b456bf5fde2c473331ff75bed9c6be3634948ba6a6507e4c19c2abf605",
				"dweb:/ipfs/QmUm5NKd1ToSr8MHVVanQv3XEkQpmYKw2441KXYyXPE6np"
			]
		},
		"Users/pperotti/Documents/CURSOS/Udacity/Blockchain developer/Projects/Project_5_Starter_Code/node_modules/openzeppelin-solidity/contracts/utils/Address.sol": {
			"keccak256": "0x5c731061b804fa256fc8c05150eafe5d20b6bb94541a8f187912bf84f7033f34",
			"urls": [
				"bzz-raw://a3c2d9f046beebab7fb41b1b124a6a124a36f510f7c67365861402ac831bdc71",
				"dweb:/ipfs/QmUtASRgitregbKH83anopLtF9vFQe3BKeAjhUa6F7t9YV"
			]
		}
	},
	"version": 1
}